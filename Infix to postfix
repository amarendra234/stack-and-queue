//{ Driver Code Starts
// C++ implementation to convert infix expression to postfix
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
    // Function to convert an infix expression to a postfix expression.
    void set_priority(unordered_map<char,int>&umap){
        umap['+']=0;
        umap['-']=0;
        umap['*']=1;
        umap['/']=1;
        umap['^']=2;
        umap['(']=3;
    }
    string infixToPostfix(string s) {
        // set priority order
        unordered_map<char,int>umap;
        set_priority(umap);
        stack<char>st;
        string ans="";
        for(int i=0;i<s.size();i++){
            if(isalnum(s[i])){
                ans+=s[i];
            }else if(s[i]=='('){
                st.push(s[i]);
            }else if(s[i]==')'){
                while(!st.empty() and st.top()!='('){
                    ans+=st.top();
                    st.pop();
                }
                if(!st.empty() and st.top()=='('){
                    st.pop();
                }
                
            }else{
                while(!st.empty() and st.top()!='(' and umap[st.top()]>=umap[s[i]]){
                    ans+=st.top();
                    st.pop();
                }
                st.push(s[i]);
            }
        }
        while(!st.empty()){
            ans+=st.top();
            st.pop();
        }
    return ans;
    }
};


//{ Driver Code Starts.
// Driver program to test above functions
int main() {
    int t;
    cin >> t;
    cin.ignore(INT_MAX, '\n');
    while (t--) {
        string exp;
        cin >> exp;
        Solution ob;
        cout << ob.infixToPostfix(exp) << endl;
    }
    return 0;
}

// } Driver Code Ends
